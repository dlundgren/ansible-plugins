#!/usr/bin/python
#coding: utf-8 -*-
# (c) 2017, David Lundgren <dlundgren@syberisle.net>
#
# This file is part of Ansible
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the MIT license.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.
#
# You should have received a copy of the MIT.
# If not, see <http://opensource.org/licenses/MIT>.

DOCUMENTATION = '''
---
module: postconf
short_description: Add or remove Postfix configuration
requirements: []
version_added: 2.0
author: David Lundgren
description:
    - Add or remove postfix configuration
options:
    name:
        required: true
        description:
            - Name of configuration option to manage.
    value:
        required: false
        description:
            - The value if "present"
    state:
        required: false
        default: "present"
        choices: [ present, absent ]
        description:
            - Whether the var should be present or absent in $dest.
'''

EXAMPLES = '''
- postconf:
    name: relayhost
    value: "relay.example.com"
- postconf:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  with_items:
    - name: inet_interfaces
      value: all
    - name: inet_protocols
      value: all
'''

from ansible.module_utils.basic import *

class postconf(object):
    def __init__(self, module, name, value):
        self.module=module
        self.name=name
        self.changed=False
        self.value=value
        self.bin=module.get_bin_path('postconf')

    def exists(self):
        # sysrc doesn't really use exit codes
        (rc, out, err) = self.module.run_command(' '.join([self.bin, '-h', '-n', self.name]))

        if out.strip() == "" or out.strip() != self.value:
            return False
        else:
            return True

    def create(self):
        if self.module.check_mode:
            self.changed = True
            return

        # if there is a space we need to escape it
        if self.value.find(" "):
            value = '"%s"' % self.value
        else:
            value = self.value
        self.module.run_command(' '.join([self.bin, '-e', "%s=%s" % (self.name, value)]))
        (rc, out, err) = self.module.run_command(' '.join([self.bin, '-h', '-n', self.name]))
        if out.strip() == self.value:
            self.changed = True
            return True
        else:
            return False

    def destroy(self):
        if self.module.check_mode:
            self.changed = True
            return

        self.module.run_command(' '.join([self.bin, '-X', self.name]))
        (rc, out, err) = self.module.run_command(' '.join([self.bin, '-h', '-n', self.name]))
        if out.strip() == "":
            self.changed = True
            return True
        else:
            return False

def main():
    module = AnsibleModule(
        supports_check_mode = True,
        argument_spec       = dict(
            name  = dict(required=True),
            value = dict(default=''),
            state = dict(default='present', choices=['present','absent'])
        ),
    )
    
    name   = module.params.pop('name')
    value   = module.params.pop('value')
    state   = module.params.pop('state')

    # convert True to "yes"
    if value == True or value == "True":
        value = "yes"

    result = {
        'name' : name,
        'value' : value,
        'state' : state
    }
    
    pc = postconf(module, name, value)

    if state == 'present':
        if not pc.exists():
            pc.create()
    elif state == 'absent':
        if pc.exists():
            pc.destroy()

    result['changed'] = pc.changed

    module.exit_json(**result)

# import module snippets
main()