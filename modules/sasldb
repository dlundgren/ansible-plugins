#!/usr/bin/python
#coding: utf-8 -*-
# (c) 2017, David Lundgren <dlundgren@syberisle.net>
#
# This file is part of Ansible
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the MIT license.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.
#
# You should have received a copy of the MIT.
# If not, see <http://opensource.org/licenses/MIT>.

DOCUMENTATION = '''
---
module: sasldb
short_description: Interact with sasldb files
requirements: []
version_added: 2.0
author: David Lundgren
description:
    - Interact with sasldb files
options:
    dest:
        required: false
        default: "/etc/sasldb2"
        description:
            - What file to operate on.
    name:
        required: true
        description:
            - Name of user to manage.
    realm:
        required: false
        default: hostname
        description:
            - Name of the realm to use
    password:
        required: false
        description:
            - The password if "present"
    state:
        required: false
        default: "present"
        choices: [ present, absent ]
        description:
            - Whether the var should be present or absent in $dest.
'''

EXAMPLES = '''
- sasldb:
    dest: /var/spool/postfix/etc/sasldb2
    name: test
    realm: relay.example.com
    password: testpass
'''

from ansible.module_utils.basic import *
import socket, subprocess

class sasldb(object):
    def __init__(self, module, dest, name, realm, password):
        self.module = module
        self.changed = False
        self.dest = dest
        self.name = name
        self.password = password
        self.list = module.get_bin_path('sasldblistusers2')
        self.passwd = module.get_bin_path('saslpasswd2')

        if realm.strip() == "":
            realm = socket.gethostname()
        self.realm = realm
        self.auth = "%s@%s" % (name, realm)

    def exists(self):
        # sysrc doesn't really use exit codes
        cmd = [self.list, '-f', self.dest]

        (rc, out, err) = self.module.run_command(' '.join(cmd))

        return out.find(self.auth) != -1

    def create(self):
        if self.module.check_mode:
            self.changed = True
            return

        # if there is a space we need to escape it
        cmd = [self.passwd, '-p', '-c', '-f', self.dest, '-u', self.realm, self.name]
        p = subprocess.Popen(cmd, stdin = subprocess.PIPE)
        p.communicate(input=self.password)
        self.module.run_command(' '.join(cmd))

        if self.exists():
            self.changed = True

        return self.changed

    def destroy(self):
        if self.module.check_mode:
            self.changed = True
            return

        self.module.run_command(' '.join([self.passwd, '-f', self.dest, '-d', '-u', self.realm, self.name]))
        if not self.exists():
            self.changed = True
            return True
        else:
            return False

def main():
    module = AnsibleModule(
        supports_check_mode = True,
        argument_spec       = dict(
            dest     = dict(type='path', default='/etc/sasldb2'),
            name     = dict(type='str',  required=True),
            password = dict(type='str',  default='', no_log=True),
            realm    = dict(type='str',  default=''),
            state    = dict(type='str',  default='present', choices=['present','absent'])
        ),
    )

    passwd = module.params.pop('password')
    name   = module.params.pop('name')
    realm  = module.params.pop('realm')
    dest   = module.params.pop('dest')
    state  = module.params.pop('state')

    if state == 'present' and passwd.strip() == "":
        raise ValueError("Password must be specified when creating users")

    result = {
        'dest'     : dest,
        'name'     : name,
        'realm'    : realm,
        'password' : "NOT DISPLAYED",
        'state'    : state
    }

    db = sasldb(module, dest, name, realm, passwd)

    if state == 'present':
        if not db.exists():
            db.create()
    elif state == 'absent':
        if db.exists():
            db.destroy()

    result['changed'] = db.changed

    module.exit_json(**result)

# import module snippets
main()
