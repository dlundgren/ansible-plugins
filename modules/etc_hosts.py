#!/usr/bin/python
# coding: utf-8 -*-
# (c) 2014-2019, David Lundgren <dlundgren@syberisle.net>
#
# This file is meant to be used as part of Ansible
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the MIT license.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.
#
# You should have received a copy of the MIT.
# If not, see <http://opensource.org/licenses/MIT>.

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = '''
---
module: etc_hosts
short_description: Add or remove etc_hosts
requirements: []
version_added: 1.7
author: David Lundgren
description:
    - Add or remove hosts from /etc/hosts.
options:
    address:
        required: true
        description:
            - IP Address of host.
    name:
        required: true
        default: true
        description:
            - Name of the host.
    state:
        required: false 
        default: present
        choices: [present, absent]
        description:
            - Whether or not the host should be associated to the address.
    file:
        required: false
        default: /etc/hosts
        description:
          - The file to modify.

'''
import os

from ansible.module_utils.basic import AnsibleModule, get_platform


class EtcHostsModule(object):
	"""Manages a hosts file"""
	MAX_LINE_LENGTH = 255
	NOTIFY_BANNER = "#### AUTOGENERATED ####"

	def __init__(self, module, file, **kwargs):
		self.module = module
		self.file = file
		self.iphosts = {}
		self.hostip = {}
		self.lineip = {}
		self.newips = []
		self.changed = False
		self.__raw = {}

		if 'notifyBanner' in kwargs:
			self.notifyBanner = kwargs['notifyBanner']
		else:
			self.notifyBanner = self.NOTIFY_BANNER

		self.__readHostsFile()

	def __readHostsFile(self):
		"""Read the given exports file if it exists"""
		if not os.path.exists(self.file):
			return

		with open(self.file, 'r') as f:
			self.__raw = f.readlines()
			for lineno, line in enumerate(self.__raw):
				# skip any comment or blank lines
				if line[0] == '#' or line == "\n" or line == (self.NOTIFY_BANNER + "\n"):
					continue

				line = line.split()
				currentIp = line[0]
				if not currentIp in self.iphosts:
					# if the IP hasn't been seen set it up along with it's line
					self.iphosts[currentIp] = []
					self.lineip[lineno] = currentIp

				for host in line[1:]:
					if not host in self.iphosts[currentIp]:
						self.iphosts[currentIp].append(host)

				for host in self.iphosts[currentIp]:
					self.hostip[host] = currentIp

	def __formatHostArg(self, hosts):
		"""Formats the host arg to be useable by our functions"""
		if hosts is None:
			return None

		if isinstance(hosts[0], str):
			return [hosts[0]]

		return hosts[0]

	def ipExists(self, ip):
		"""Returns if the IP exists in the file

		Arguments:
		  ip : the ip to check
		"""
		return ip in self.iphosts

	def ipHosts(self, ip):
		"""Returns a list of the hosts for the given ip

		Arguments:
			ip : The ip to return hosts for
		"""
		if ip in self.iphosts:
			return self.iphosts

		return None

	def hostExists(self, host):
		"""Returns if the host exists in the file

		Arguments:
		  host : the host to check
		"""
		return host in self.hostip

	def hostIp(self, host):
		"""Returns the hosts IP address if it exists

		Arguments:
			host : The host to get the ip for
		"""
		if host in self.hostip:
			return self.hostip[host]

		return None

	def deleteHost(self, *hosts):
		"""Clears the given hosts

		Keyword Arguments:
			hosts : list of host(s) to clear
		"""
		for host in self.__formatHostArg(hosts):
			if host in self.hostip:
				hostIp = self.hostip[host]
				del self.iphosts[hostIp][self.iphosts[hostIp].index(host)]
				del self.hostip[host]
				self.changed = True
				return True

		return False

	def add(self, ip, *hosts, **kwargs):
		"""Adds the ip and hosts to the file

		Hosts that already exist will not be added to the given ip

		Arguments:
			ip    : the IP Address to use
			hosts : list of host(s) to use for this IP
		Keyword Arguments:
			replace : If a host exists, should it be replaced? default: false
		"""
		saveHosts = []
		for idx, host in enumerate(self.__formatHostArg(hosts)):
			if host in self.hostip:
				if self.hostip[host] == ip:
					continue
				elif 'replace' in kwargs and kwargs['replace']:
					self.deleteHost(host)
			saveHosts.append(host)

		# no hosts to update
		if len(saveHosts) == 0:
			return False

		if ip in self.iphosts:
			self.iphosts[ip].extend(saveHosts)
		else:
			# add a new entry
			self.iphosts[ip] = saveHosts
			self.newips.append(ip)

		# make sure the hosts can be reversed
		for host in saveHosts:
			self.hostip[host] = ip

		self.changed = True

		return True

	def save(self):
		"""Writes the file

		Returns True when there were changes or False for no changes
		"""
		# only save when we have changes
		if not self.changed:
			return False

		with open(self.file, 'w') as tmpFile:
			tmpFile.write("%s\n" % self.NOTIFY_BANNER)
			for lineno, line in enumerate(self.__raw):
				if (line[0] == '#' or line == "\n") and line != ("%s\n" % self.NOTIFY_BANNER):
					tmpFile.write(line)
					continue
				elif not lineno in self.lineip:
					continue

				ip = self.lineip[lineno]
				if len(self.iphosts[ip]) > 0:
					lineLength = len(ip)
					tmpFile.write(ip)
					for host in self.iphosts[ip]:
						if (len(host) + lineLength + 1) > self.MAX_LINE_LENGTH:
							# break the line up
							tmpFile.write("\n")
							lineLength = len(ip)
							tmpFile.write(ip)
						lineLength += 1 + len(host)
						tmpFile.write(" %s" % host)
					tmpFile.write("\n")

			# add all new ips
			for ip in self.newips:
				# @TODO make this line length aware
				if len(self.iphosts[ip]) > 0:
					tmpFile.write("%s %s\n" % (ip, ' '.join(self.iphosts[ip])))

		return True


def main():
	module = AnsibleModule(
		supports_check_mode=True,
		argument_spec=dict(
			address=dict(
				required=True
			),
			name=dict(
				required=True
			),
			file=dict(
				default="/etc/hosts"
			),
			state=dict(
				default="present",
				choices=["present", "absent"]
			)
		),
	)

	address = module.params.pop('address')
	name = module.params.pop('name')
	file = module.params.pop('file')
	state = module.params.pop('state')
	result = {
		'address': address,
		'name': name,
		'file': file,
		'state': state
	}

	hosts = EtcHostsModule(module, file)

	hostIp = hosts.hostIp(name)
	ipHosts = hosts.ipHosts(address)
	hostHasIp = hostIp == address
	ipHasHost = False

	if ipHosts is not None:
		ipHasHost = name in ipHosts[address]

	if 'absent' == state:
		if hostHasIp or ipHasHost:
			hosts.deleteHost(name)
	elif 'present' == state:
		if not ipHasHost or not hostHasIp:
			hosts.deleteHost(name)
			hosts.add(address, name)
		elif not ipHasHost and not hostHasIp:
			hosts.add(address, name)

	if hosts.changed:
		result['changed'] = True
		if not module.check_mode:
			hosts.save()

	module.exit_json(**result)


if __name__ == '__main__':
	main()
